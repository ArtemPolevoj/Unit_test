*Задание 1. *Представьте, что вы работаете над разработкой простого приложения для
записной книжки, которое позволяет пользователям добавлять, редактировать и удалять контакты.
Ваша задача - придумать как можно больше различных тестов
(юнит-тесты, интеграционные тесты, сквозные тесты) для этого приложения.
Напишите название каждого теста, его тип и краткое описание того, что этот тест проверяет.
    1. addUserTest (юнит-тест): Проверка функции addUser, которая добавляет новый контакт
    в записную книжку. Тест проверяет, что контакт успешно добавляется и появляется в списке контактов.

    2. editUserTest (юнит-тест): Проверка функции editUser, которая редактирует существующий контакт.
    Тест проверяет, что контакт успешно редактируется и изменения сохраняются.

    3. deleteUserTest (юнит-тест): Проверка функции deleteUser, которая удаляет контакт из записной книжки.
    Тест проверяет, что контакт успешно удаляется и исчезает из списка контактов.

    4. searchUserTest (юнит-тест): Проверка функции searchUser, которая позволяет пользователю искать
    контакты по различным параметрам (например, по имени, фамилии или номеру телефона). Тест проверяет,
    что функция возвращает правильные результаты поиска.

    5. addDuplicateUserTest (юнит-тест): Проверка функции addUser, когда уже существует контакт
    с такими же данными. Тест проверяет, что система возвращает ошибку или игнорирует повторное добавление контакта.

    6. sortContactsTest (юнит-тест): Проверка функции sortContacts, которая сортирует контакты в алфавитном порядке.
    Тест проверяет, что контакты правильно сортируются и отображаются в нужном порядке.

    7. integrationTest (интеграционный тест): Тестирование взаимодействия между функциями добавления,
    редактирования и удаления контактов. Тест проверяет, что данные корректно передаются между функциями
    и изменения отображаются в пользовательском интерфейсе.

    8. validationTest (интеграционный тест): Проверка валидации данных пользовательского ввода при добавлении
    или редактировании контактов. Тест проверяет, что система корректно обрабатывает некорректные
    данные и выводит сообщения об ошибках.

    9. persistenceTest (сквозной тест): Проверка сохранения данных контактов в базе данных или файле.
    Тест проверяет, что данные сохраняются после закрытия и повторного открытия приложения.

    10. performanceTest (сквозной тест): Проверка производительности приложения при большом количестве контактов.
    Тест проверяет, что приложение остается отзывчивым и работает без задержек или зависаний при высоких нагрузках.

*Задание 2. *Ниже список тестовых сценариев. Ваша задача - определить тип каждого теста
(юнит-тест, интеграционный тест, сквозной тест) и объяснить, почему вы так решили.
Проверка того, что функция addContact корректно добавляет новый контакт в список контактов"".
""Проверка того, что при добавлении контакта через пользовательский интерфейс, контакт корректно отображается в списке контактов"".
""Проверка полного цикла работы с контактом: создание контакта, его редактирование и последующее удаление"".

    1. Проверка того, что функция addContact корректно добавляет новый контакт в список контактов - юнит-тест.
    Этот тест проверяет только одну функцию (addContact) и не взаимодействует с другими компонентами системы.

    2. Проверка того, что при добавлении контакта через пользовательский интерфейс,
    контакт корректно отображается в списке контактов - интеграционный тест.
    Этот тест проверяет, как взаимодействуют разные компоненты системы: пользовательский интерфейс и список контактов.
    Он проверяет, что данные корректно передаются между двумя компонентами.

    3. Проверка полного цикла работы с контактом: создание контакта, его редактирование
    и последующее удаление - сквозной тест. Этот тест проверяет полный жизненный цикл работы с контактом,
    включая создание, редактирование и удаление. Он включает в себя взаимодействие нескольких функци
    и компонентов системы и проверяет, что данные сохраняются и обрабатываются корректно на всех этапах.